import re
import os
import yaml
import pandas as pd
import argparse

def parse_path(path, key_map):
    out = {}
    vars = os.path.basename(path).split('_')
    for k in key_map:
        out[k] = None
        for v in vars:
            if v.startswith(k):
                out[k] = v[len(k):]
        if out[k] is None:
            raise ValueError('Key %s not found in path %s.' % (k, path))

    return out



if __name__ == '__main__':
    argparser = argparse.ArgumentParser('''
    Collect evaluation metrics from multiple models and dump them into a table.
    ''')
    argparser.add_argument('table_path', help='Path to eval table generated by gather_metrics utility.')
    argparser.add_argument('key_map_path', help='Path to YAML file containing map from keys in parsed model directory path to human-readable names.')
    argparser.add_argument('-m', '--measures', nargs='+', help='Measures (column names of eval table) to plot.')
    argparser.add_argument('-o', '--outdir', default='./eval_plots', help='Path to output directory.')
    args = argparser.parse_args()

    df = pd.read_csv(args.table_path, sep=' ')
    with open(args.key_map_path, 'r') as f:
        key_map = yaml.load(f)
    if 'key_order' in key_map:
        key_order = key_map.pop('key_order')
    else:
        key_order = sorted(list(key_map.keys()))

    paths = df.model_path.to_list()
    key_vals = [parse_path(x, key_map) for x in paths]
    df_new = pd.DataFrame(key_vals)
    df = pd.concat([df, df_new], axis=1)

    print(df.columns)



